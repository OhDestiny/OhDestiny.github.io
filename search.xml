<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql-download</title>
      <link href="/2024/09/06/mysql-download/"/>
      <url>/2024/09/06/mysql-download/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql的下载安装"><a href="#mysql的下载安装" class="headerlink" title="mysql的下载安装"></a>mysql的下载安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>打开官网 <a href="http://www.mysql.com/">www.mysql.com</a><br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/mysql/mysql_downloads_one.png"></li><li>进入download<br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/mysql/mysql_downloads_two.png"></li><li>下划页面，进入downloads community server<br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/mysql/mysql_downloads_three.png"></li><li>选择版本 和 zip包 下载<br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/mysql/mysql_downloads_four.png"></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-将zip解压到-program-files-这个看个人习惯"><a href="#1-将zip解压到-program-files-这个看个人习惯" class="headerlink" title="1. 将zip解压到 program files 这个看个人习惯"></a>1. 将zip解压到 program files 这个看个人习惯</h3><h3 id="2-配置path环境变量"><a href="#2-配置path环境变量" class="headerlink" title="2. 配置path环境变量"></a>2. 配置path环境变量</h3><p>添加&#x2F;bin到path下边就可以</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Program Files\mysql-8.4.2-winx64\bin  </span><br></pre></td></tr></table></figure><h3 id="3-初始化data目录"><a href="#3-初始化data目录" class="headerlink" title="3. 初始化data目录"></a>3. 初始化data目录</h3><ol><li><p>管理员身份运行cmd</p></li><li><p>输入下边初始化命令：</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br><span class="line"></span><br><span class="line">2024-08-24T03:41:16.606538Z 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: ?jjoF03jYuic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这行的末尾出现一个密码 先记录下这个密码 这个是后边连接数据库需要的密码</span></span><br></pre></td></tr></table></figure><h3 id="4-安装mysql服务"><a href="#4-安装mysql服务" class="headerlink" title="4. 安装mysql服务"></a>4. 安装mysql服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure><ul><li>查看服务是否成功安装</li></ul><p>此电脑右键 —-&gt; 管理 —-&gt; 服务和应用程序 —-&gt; 服务 —-&gt; 找mysql服务。</p><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/mysql/mysql_service.png"></p><h3 id="5-启动停止mysql服务"><a href="#5-启动停止mysql服务" class="headerlink" title="5. 启动停止mysql服务"></a>5. 启动停止mysql服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><h3 id="6-初始化配置"><a href="#6-初始化配置" class="headerlink" title="6. 初始化配置"></a>6. 初始化配置</h3><ul><li>登入mysql</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">输入密码（右键copy）</span><br></pre></td></tr></table></figure><ul><li>修改Mysql的root账号密码</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AlTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>；</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>遇到的报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR 1524 (HY000): Plugin <span class="string">&#x27;mysql_native_password&#x27;</span> is not loaded</span><br></pre></td></tr></table></figure><p>提示说 mysql_native_password 这个插件没有加载，经过查阅资料，这个插件允许用户通过操作系统的socket来进行身份验证，而不是使用密码，而Mysql8.4(LTS)中，默认不再启用Mysql_native_password这个插件。而是使用cashing_sha2_password.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> plugins;</span><br><span class="line"></span><br><span class="line">mysql_native_password  disable</span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AlTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> caching_sha2_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>；</span><br></pre></td></tr></table></figure><p>排查哪些数据库用户在使用这个插件：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host, plugin <span class="keyword">from</span> mysql.user <span class="keyword">WHERE</span> plugin<span class="operator">=</span><span class="string">&#x27;mysql_native_password&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;&lt;USERNAME&gt;&#x27;</span>@<span class="string">&#x27;&lt;HOST&gt;&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> caching_sha2_password <span class="keyword">BY</span> <span class="string">&#x27;&lt;PASSWORD&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>使用新的账号密码登入</li></ul><h3 id="7-卸载mysql"><a href="#7-卸载mysql" class="headerlink" title="7. 卸载mysql"></a>7. 卸载mysql</h3><ul><li>停止mysql服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><ul><li>删除mysql服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --remove mysql;</span><br></pre></td></tr></table></figure><ul><li>删除mysql的目录</li></ul><h2 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h2><h3 id="1-本地登入"><a href="#1-本地登入" class="headerlink" title="1. 本地登入"></a>1. 本地登入</h3><p>dos命令窗口：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure><h3 id="2-远程连接"><a href="#2-远程连接" class="headerlink" title="2. 远程连接"></a>2. 远程连接</h3><p>默认情况下，不允许使用root账户进行远程登入</p><p>开启root的远程登入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456;                                     # 使用root账号本地登入</span><br><span class="line">use mysql;                                                 # 使用mysql数据库</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;              # <span class="operator">%</span> 表示一个通配符，表示可以从任何的主机连接</span><br><span class="line">flush privilege;                                           # 刷新权限</span><br></pre></td></tr></table></figure><p>自此，登入成功，就可以进行后续的创建数据库，创建数据表等等操作。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git_plus</title>
      <link href="/2024/09/06/git-plus/"/>
      <url>/2024/09/06/git-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h1><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/git/company_stucture.png"></p><p>在公司实际开发过程种，会同时推进多个任务，比如说目前给用户使用的软件版本，master分支，而使用过程中，还得继续开发，就会有dev分支，这样通过不同的分支就看可以将自己的工作从开发主线上分离开来，开发自己的分支的时候，不会影响到主线分支的运行，对于初学者而言，分支可以简单理解成副本，一个分支就是一个单独的副本（<mark>分支的底层其实也是指针的引用</mark>）</p><ul><li>分支的好处</li></ul><p>同时并行推进多个功能的开发，提高开发的效率。<br>如果开发过程中，某一个分支的开发进行不下去，也不会影响其他的分支，而如果这个分支的工作开发完成了，就可以直接和主分支进行合并。</p><h2 id="分支常用命令"><a href="#分支常用命令" class="headerlink" title="分支常用命令"></a>分支常用命令</h2><ul><li><p>查看分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -v     <span class="comment"># 查看分支</span></span><br><span class="line"></span><br><span class="line">Core@DESKTOP-2N5U1S4 MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">* master 8a87e66 second</span><br><span class="line"><span class="comment"># 只有一个分支</span></span><br></pre></td></tr></table></figure></li><li><p>创建分支</p></li></ul><p>创建分支的本质是 创建一个从head指向新分支的指针，切换分支也就是切换head的指针指向。比如想要切换回master分支的时候，就将head指向master。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><ul><li><p>切换分支</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout 要切换的分支名</span><br></pre></td></tr></table></figure></li><li><p>修改分支内容</p></li></ul><p>切换到指定分支后，直接按照之前的操作进行修改即可。</p><ul><li><p>合并分支</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge 分支名    # 把指定的分支合并到当前的分支上</span><br></pre></td></tr></table></figure></li><li><p>代码冲突合并<br>合并分支时，两个分支在同一个文件的同一个位置有两套不同的修改，git无法判断使用哪一个就会需要人为的决定新的代码内容。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Core@DESKTOP-2N5U1S4 MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git merge hot-fix</span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict in hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入文件，执行手动合并</span></span><br><span class="line"></span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">2222</span><br><span class="line">3333</span><br><span class="line">=======</span><br><span class="line">22222222222222</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">-----------------&gt; </span><span class="language-bash">手动合并成下边这样</span></span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">fdsf</span><br><span class="line">22222222222222</span><br><span class="line">3333</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add hello.txt</span><br><span class="line"></span><br><span class="line">git commit -m &quot;test&quot;       # 注意这次提交不用指定文件名</span><br></pre></td></tr></table></figure><h2 id="git的团队协作"><a href="#git的团队协作" class="headerlink" title="git的团队协作"></a>git的团队协作</h2><h3 id="1-团队内协作"><a href="#1-团队内协作" class="headerlink" title="1. 团队内协作"></a>1. 团队内协作</h3><p>push clone pull</p><h3 id="2-跨团队协作"><a href="#2-跨团队协作" class="headerlink" title="2. 跨团队协作"></a>2. 跨团队协作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fork     复制一份</span><br></pre></td></tr></table></figure><h2 id="github的使用"><a href="#github的使用" class="headerlink" title="github的使用"></a>github的使用</h2><h3 id="1-创建远程仓库"><a href="#1-创建远程仓库" class="headerlink" title="1. 创建远程仓库"></a>1. 创建远程仓库</h3><p>首先，远程库和本地库名字最好一样。这个很简单，直接github上边设置，创建仓库，然后填写仓库信息就可以。</p><h3 id="2-创建远程库的别名-默认是origin"><a href="#2-创建远程库的别名-默认是origin" class="headerlink" title="2. 创建远程库的别名 默认是origin"></a>2. 创建远程库的别名 默认是origin</h3><p>创建好远程库后，后边有对应操作：</p><ul><li>如果你本地已经有仓库，远程建立空仓库，然后：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> existing_git_repo</span><br><span class="line">git remote add origin https://gitee.com/IWBTFY-forever/gitdemo.git          // 设置远程库的别名为origin 当然也可以设置其他的 </span><br><span class="line">git push -u origin <span class="string">&quot;master&quot;</span>                                                 // 将本地的master分支推送到origin分支</span><br><span class="line">git push origin dev:master                                                  // 将本地的dev推送到远程的master</span><br><span class="line">git push -u origin dev:master                                               // 指定远程的master是本地的dev的上游，下次直接git push即可推送到master</span><br></pre></td></tr></table></figure><ul><li>如果你还没有本地仓库：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> gitdemo</span><br><span class="line"><span class="built_in">cd</span> gitdemo</span><br><span class="line">git init </span><br><span class="line"><span class="built_in">touch</span> README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin https://gitee.com/IWBTFY-forever/gitdemo.git</span><br><span class="line">git push -u origin <span class="string">&quot;master&quot;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote --verbose/-v             // 用于显示本地仓库中配置的所有远程仓库的详细信息，包括它们的URL和跟踪分支。</span><br><span class="line">$ git remote -v</span><br><span class="line">git-demo        https://gitee.com/IWBTFY-forever/gitdemo.git (fetch)</span><br><span class="line">git-demo        https://gitee.com/IWBTFY-forever/gitdemo.git (push)</span><br></pre></td></tr></table></figure><h3 id="3-推送到远程库"><a href="#3-推送到远程库" class="headerlink" title="3. 推送到远程库"></a>3. 推送到远程库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push git-demo master             </span><br></pre></td></tr></table></figure><h3 id="4-拉取到本地库"><a href="#4-拉取到本地库" class="headerlink" title="4. 拉取到本地库"></a>4. 拉取到本地库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull git-demo master</span><br></pre></td></tr></table></figure><h3 id="5-克隆远程仓库到本地"><a href="#5-克隆远程仓库到本地" class="headerlink" title="5. 克隆远程仓库到本地"></a>5. 克隆远程仓库到本地</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/IWBTFY-forever/gitdemo.git</span><br></pre></td></tr></table></figure><p>clone会做三件事情：1. 拉取代码 2.初始化本地库 3. 创建别名</p><h3 id="6-邀请别人进入仓库"><a href="#6-邀请别人进入仓库" class="headerlink" title="6. 邀请别人进入仓库"></a>6. 邀请别人进入仓库</h3><p>这个直接界面找就行。</p><h3 id="ssh免密登入"><a href="#ssh免密登入" class="headerlink" title="ssh免密登入"></a>ssh免密登入</h3><ul><li><p>本地电脑生成ssh密钥<br>—&gt; &#x2F;user&#x2F;core&#x2F;.ssh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li><li><p>将公钥取出配置到gitee上</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh gitee.com</span><br><span class="line"></span><br><span class="line">C:\Users\Core&gt;ssh gitee.com</span><br><span class="line">Hi iwbtfy(@IWBTFY-forever)! You<span class="string">&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span></span><br><span class="line"><span class="string">Connection to gitee.com closed.</span></span><br></pre></td></tr></table></figure><ul><li>使用ssh克隆项目<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:IWBTFY-forever/gitdemo.git</span><br></pre></td></tr></table></figure></li></ul><h2 id="idea集成git"><a href="#idea集成git" class="headerlink" title="idea集成git"></a>idea集成git</h2><p>这个比较简单，自己多用就好了，idea里边已经将命令图形化了</p><h3 id="1-git的忽略文件"><a href="#1-git的忽略文件" class="headerlink" title="1. git的忽略文件"></a>1. git的忽略文件</h3><p>当我们使用idea进行项目开发的时候，会有许多的idea的配置文件，是我们不需要同步给别人的，所以我们需要忽略这些文件。</p><p>.gitignore</p><h3 id="2-创建git-ignore文件将其放在家目录下，便于gitconfig文件引用"><a href="#2-创建git-ignore文件将其放在家目录下，便于gitconfig文件引用" class="headerlink" title="2. 创建git.ignore文件将其放在家目录下，便于gitconfig文件引用"></a>2. 创建git.ignore文件将其放在家目录下，便于gitconfig文件引用</h3><p>git.ignore 文件的模板内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compiled class file</span></span><br><span class="line">*.class</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># logfile</span></span><br><span class="line">*.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>.gitconfig文件下添加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">  excludefile = c:/Users/core/git.ignore</span><br></pre></td></tr></table></figure><h3 id="3-推送本地仓库到远程库"><a href="#3-推送本地仓库到远程库" class="headerlink" title="3. 推送本地仓库到远程库"></a>3. 推送本地仓库到远程库</h3><p>直接share project to github即可 在github上创建远程库</p><h3 id="4-gitee和github项目迁移"><a href="#4-gitee和github项目迁移" class="headerlink" title="4. gitee和github项目迁移"></a>4. gitee和github项目迁移</h3><p>创建仓库那一页面上，往下翻，可以输入github仓库链接直接导入github的项目。<br>并且可以强制同步更新github的仓库。</p><h2 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h2><p>gitlab一般用于局域网内创建remote repository, 适合代码不想给其他人知道的公司使用，在局域网内创建代码仓库，内部使用。</p><p>官网: <a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git java开发 程序员必备工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_overview</title>
      <link href="/2024/09/02/java-overview/"/>
      <url>/2024/09/02/java-overview/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitOne</title>
      <link href="/2024/08/28/gitOne/"/>
      <url>/2024/08/28/gitOne/</url>
      
        <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="1-git介绍"><a href="#1-git介绍" class="headerlink" title="1. git介绍"></a>1. git介绍</h2><p>git是一个分布式的版本控制工具，每个电脑都有全部的版本。</p><h3 id="1-1-什么叫做版本控制？"><a href="#1-1-什么叫做版本控制？" class="headerlink" title="1.1 什么叫做版本控制？"></a>1.1 什么叫做版本控制？</h3><p>记录文件内容变化，用来查阅特定版本和修订情况。可以帮助用户记录文件的修改历史，从而能够查看历史版本，方便版本切换。</p><p>举例：可以参考自己当初写毕业论文的时候，改了一版又一版，但是都不是在原版上进行的修改，都是在copy一版后进行修改，为什么我们会这么做，因为我们也不确定，改完的那一版会比之前的一版好，这种保存很多版的做法其实就是一种版本控制的方式。</p><h3 id="1-2-为什么要版本控制？"><a href="#1-2-为什么要版本控制？" class="headerlink" title="1.2 为什么要版本控制？"></a>1.2 为什么要版本控制？</h3><p>个人开发过渡到团队协作，git有一个很重要的方式是分支。</p><h3 id="1-3-版本控制分类"><a href="#1-3-版本控制分类" class="headerlink" title="1.3 版本控制分类"></a>1.3 版本控制分类</h3><ul><li>集中式：(SVN)   单点故障， 每个人都可以看到其他人的代码，可以设置权限，比如实习生权限低，如果服务器停了，就会导致没人可以提交。</li><li>分布式：(git)   数据安全   服务器停了，也可以在本地进行版本控制，每个人都有一套完整的项目更改记录。</li></ul><h3 id="1-4-git的区域"><a href="#1-4-git的区域" class="headerlink" title="1.4 git的区域"></a>1.4 git的区域</h3><ul><li><p>本地区：<br>工作区(写代码，就是idea在本地磁盘创建的文件) —(git add)—&gt; 暂存区  —(git commit)-&gt;  本地库(提交到这里就会生成历史版本)</p></li><li><p>远程库:</p><ul><li>局域网：<ul><li>gitlab</li></ul></li><li>互联网：<ul><li>github</li><li>gitee</li></ul></li></ul></li></ul><h2 id="2-git的安装"><a href="#2-git的安装" class="headerlink" title="2. git的安装"></a>2. git的安装</h2><p>直接官网安装 <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/git/downloads.png"></p><p>然后运行, 无脑下一步即可。</p><h2 id="3-git常用命令"><a href="#3-git常用命令" class="headerlink" title="3. git常用命令"></a>3. git常用命令</h2><h3 id="3-1-前期用户配置"><a href="#3-1-前期用户配置" class="headerlink" title="3.1 前期用户配置"></a>3.1 前期用户配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name                      <span class="comment"># 设置用户名</span></span><br><span class="line">git config --global user.email                     <span class="comment"># 设置邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这两个和 github 或者 gitee等远程仓库的账号密码没什么关系，这两个只是想标识一下 你如果提交代码到远程库 你的用户名和邮箱。一般在下载好git的时候就会配置好。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检验是否配置成功</span></span><br><span class="line"><span class="built_in">cd</span> /window/core                                    <span class="comment"># 进入用户家目录</span></span><br><span class="line"><span class="built_in">cat</span> ~/.gitconfig                                   <span class="comment"># 查看文件内容</span></span><br></pre></td></tr></table></figure><h3 id="3-2-初始化本地库"><a href="#3-2-初始化本地库" class="headerlink" title="3.2 初始化本地库"></a>3.2 初始化本地库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现.git 隐藏文件 ls -a查看隐藏文件</span></span><br></pre></td></tr></table></figure><h3 id="3-3-查看状态"><a href="#3-3-查看状态" class="headerlink" title="3.3 查看状态"></a>3.3 查看状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">Core@DESKTOP-2N5U1S4 MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><p>发现当前状态是没有提交过，并且没有文件需要提交</p><ul><li>工作区创建文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim hello.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># tips: 在linux的vim里边 yy是复制，p是粘贴</span></span><br></pre></td></tr></table></figure><ul><li>再次查看状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Core@DESKTOP-2N5U1S4 MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><p>此时有一个文件了，但是未被追踪，也就是没有放到暂存区</p><h3 id="3-4-添加到暂存区"><a href="#3-4-添加到暂存区" class="headerlink" title="3.4 添加到暂存区"></a>3.4 添加到暂存区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add hello.txt</span><br></pre></td></tr></table></figure><ul><li>再次查看状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Core@DESKTOP-2N5U1S4 MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   hello.txt</span><br></pre></td></tr></table></figure><p>已经追踪到，待提交。</p><h3 id="3-5-删除暂存区文件"><a href="#3-5-删除暂存区文件" class="headerlink" title="3.5 删除暂存区文件"></a>3.5 删除暂存区文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached hello.txt</span><br></pre></td></tr></table></figure><h3 id="3-6-提交本地库"><a href="#3-6-提交本地库" class="headerlink" title="3.6 提交本地库"></a>3.6 提交本地库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交的日志信息&quot;</span> 文件名</span><br></pre></td></tr></table></figure><ul><li>再次查看状态</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Core@DESKTOP-2N5U1S4 MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h3 id="3-7-查看引用日志信息"><a href="#3-7-查看引用日志信息" class="headerlink" title="3.7 查看引用日志信息"></a>3.7 查看引用日志信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog</span><br><span class="line"></span><br><span class="line">Core@DESKTOP-2N5U1S4 MINGW64 /d/gitdemo (master)</span><br><span class="line">$ git reflog</span><br><span class="line">a091c49 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): first</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span>  <span class="comment"># 查看详细信息</span></span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit a091c4919d7559930f089512aebfc5b55d592e87 (HEAD -&gt; master)</span><br><span class="line">Author: iwbtfy &lt;2068792800@qq.com&gt;</span><br><span class="line">Date:   Tue Aug 27 16:25:39 2024 +0800</span><br><span class="line"></span><br><span class="line">    first</span><br></pre></td></tr></table></figure><h3 id="3-8-版本穿梭"><a href="#3-8-版本穿梭" class="headerlink" title="3.8 版本穿梭"></a>3.8 版本穿梭</h3><pre><code class="bash">git reflog      # 查看历史版本信息git log         # 详细信息git reset -hard 版本号            # 回到前边任意版本指针指向master分支，master分支又指向第二个版本git 切换版本，其实底层移动的是HEAD指针。</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxxObjectIsNotCallable</title>
      <link href="/2024/08/16/xxxObjectIsNotCallable/"/>
      <url>/2024/08/16/xxxObjectIsNotCallable/</url>
      
        <content type="html"><![CDATA[<h1 id="xxx-Object-is-not-callable"><a href="#xxx-Object-is-not-callable" class="headerlink" title="xxx Object is not callable"></a>xxx Object is not callable</h1><p>这篇博客记录一个由于开发中,变量命名不规范导致的一个错误 —— int object is not callable </p><h2 id="1-错误解释："><a href="#1-错误解释：" class="headerlink" title="1. 错误解释："></a>1. 错误解释：</h2><p>int类型的数据是不可调用的，也就是说你的代码中出现了把int类型数据当作函数来调用的情况</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br></pre></td></tr></table></figure><h2 id="2-错误分析"><a href="#2-错误分析" class="headerlink" title="2. 错误分析"></a>2. 错误分析</h2><p>当时pycharm报错定位到这个位置，思来想去，感觉这里也不可能出现这个报错，因为这里就是使用len函数获取list长度并且打印的代码。你们可以猜测是为啥出现 int object is not callable。</p><p>经过排查（排查老久了）发现前边出现了一坨奇怪的代码，也就是这坨，导致了出现这个错误，原因其实很简单。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span> = res_queue.qsize()</span><br></pre></td></tr></table></figure><p>前边使用了len变量获取队列的长度！！！ 然后导致len变成了int类型对象，在后续len(res)的时候，没有使用默认的len()函数，而是使用了len变量，那一个int类型的变量当然是不能当作函数来调用的。</p><h2 id="3-出现此类错误的排查方向"><a href="#3-出现此类错误的排查方向" class="headerlink" title="3. 出现此类错误的排查方向"></a>3. 出现此类错误的排查方向</h2><p>当然，最好的就是规范代码书写，包括但不限于自定义的变量名，函数名，规范书写可以规避很多低级bug！！</p><ul><li>排查变量名是否冲突</li><li>排查出现错误的函数名是否拼写错误</li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础语法小细节 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_tenToTwenty</title>
      <link href="/2024/08/13/ctfshow-tenToTwenty/"/>
      <url>/2024/08/13/ctfshow-tenToTwenty/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="11-域名其实也可以隐藏信息"><a href="#11-域名其实也可以隐藏信息" class="headerlink" title="11 域名其实也可以隐藏信息"></a>11 域名其实也可以隐藏信息</h2><p>这题就是想让我们学习查找域名相关记录信息，使用dig工具即可查询到域名的记录信息</p><ul><li>centos下安装dig</li><li>输入如下命令可以查询example.com的A记录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig example.com @8.8.8.8 A</span><br></pre></td></tr></table></figure></li></ul><h2 id="12-网站可能页面会出现公开数字密码"><a href="#12-网站可能页面会出现公开数字密码" class="headerlink" title="12 网站可能页面会出现公开数字密码"></a>12 网站可能页面会出现公开数字密码</h2><ul><li>扫描目录 这个不做解释，直接用御剑&#x2F;dirsearch 都可以进行扫描</li><li>发现robots目录 打开发现&#x2F;admin </li><li>进入 输入账号admin，在网页的最低端发现一串数字，推测为密码，于是直接输入尝试，success</li></ul><h2 id="13-技术文档有敏感信息"><a href="#13-技术文档有敏感信息" class="headerlink" title="13 技术文档有敏感信息"></a>13 技术文档有敏感信息</h2><ul><li>找到网页下面有一个document技术文档链接，点击自动下载一个pdf，打开可见默认后台登录地址，以及用户名和密码，进入后台，登录进去可见flag</li></ul><h2 id="14-editor-发现可以访问服务器的文件"><a href="#14-editor-发现可以访问服务器的文件" class="headerlink" title="14 &#x2F;editor 发现可以访问服务器的文件"></a>14 &#x2F;editor 发现可以访问服务器的文件</h2><p>依旧是扫描站点，然后发现了一个编辑器，进入，点击文件空间，居然直接访问到了服务器的文件，直接在服务器的文件资源管理器里边遨游。</p><h2 id="15-网站邮箱信息收集"><a href="#15-网站邮箱信息收集" class="headerlink" title="15 网站邮箱信息收集"></a>15 网站邮箱信息收集</h2><h3 id="扫描目录-发现一个-admin"><a href="#扫描目录-发现一个-admin" class="headerlink" title="扫描目录 发现一个&#x2F;admin"></a>扫描目录 发现一个&#x2F;admin</h3><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/qq_one.png"></p><h3 id="需要密码-但是发现可以找回密码"><a href="#需要密码-但是发现可以找回密码" class="headerlink" title="需要密码 但是发现可以找回密码"></a>需要密码 但是发现可以找回密码</h3><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/qq_two.png"></p><h3 id="找回密码需要回答问题-所在城市"><a href="#找回密码需要回答问题-所在城市" class="headerlink" title="找回密码需要回答问题 所在城市"></a>找回密码需要回答问题 所在城市</h3><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/qq_three.png"></p><h3 id="看到网站底端有网站的qq邮箱"><a href="#看到网站底端有网站的qq邮箱" class="headerlink" title="看到网站底端有网站的qq邮箱"></a>看到网站底端有网站的qq邮箱</h3><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/qq_six.png"><br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/qq_four.jpg"><br>社工发现来自西安，输入获得密码，进入后台，拿到flag</p><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/qq_five.png"></p><h2 id="16-tz-php"><a href="#16-tz-php" class="headerlink" title="16 tz.php"></a>16 tz.php</h2><p>目录下边有tz.php 文件<br>进入该文件 然后进入phpinfo  crtl+F 查找flag</p><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/tz_php.png"></p><h2 id="17-backup-sql-文件保留-可能会存在敏感信息"><a href="#17-backup-sql-文件保留-可能会存在敏感信息" class="headerlink" title="17 backup.sql 文件保留 可能会存在敏感信息"></a>17 backup.sql 文件保留 可能会存在敏感信息</h2><ul><li><p>直接扫描站点：<br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/backup_sql_one.png"></p></li><li><p>发现backup.sql，打开sql：</p></li></ul><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/backup_sql.png"></p><h2 id="18-阅读源码提前成功"><a href="#18-阅读源码提前成功" class="headerlink" title="18 阅读源码提前成功"></a>18 阅读源码提前成功</h2><p>这题是一个javascript 的游戏，游戏的目的就是让要赢，从js代码中可知，当score&gt;120时，且game_over这个参数为false时，即可赢，<br>于是打开开发者模式中的console，直接赋值score&#x3D;130 game_over&#x3D;false 然后，执行游戏 的run() 即可得到 “你赢了，去幺幺零点皮爱吃皮看看”， 即，110.php 打开它，即得flag</p><h2 id="19-AES-加解密-谁家好人-密钥key-初始向量IV都已经写在前端"><a href="#19-AES-加解密-谁家好人-密钥key-初始向量IV都已经写在前端" class="headerlink" title="19 AES 加解密 谁家好人 密钥key 初始向量IV都已经写在前端"></a>19 AES 加解密 谁家好人 密钥key 初始向量IV都已经写在前端</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkForm</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="string">&quot;0000000372619038&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> iv = <span class="string">&quot;ilove36dverymuch&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> pazzword = $(<span class="string">&quot;#pazzword&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    pazzword = <span class="title function_">encrypt</span>(pazzword,key,iv);</span><br><span class="line">    $(<span class="string">&quot;#pazzword&quot;</span>).<span class="title function_">val</span>(pazzword);</span><br><span class="line">    $(<span class="string">&quot;#loginForm&quot;</span>).<span class="title function_">submit</span>();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">data,key,iv</span>) &#123; <span class="comment">//key,iv：16位的字符串</span></span><br><span class="line">    <span class="keyword">var</span> key1  = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Latin1</span>.<span class="title function_">parse</span>(key);</span><br><span class="line">    <span class="keyword">var</span> iv1   = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Latin1</span>.<span class="title function_">parse</span>(iv);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(data, key1,&#123;</span><br><span class="line">        iv : iv1,</span><br><span class="line">        mode : <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">        padding : <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">ZeroPadding</span></span><br><span class="line">    &#125;).<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">$flag=<span class="string">&quot;fakeflag&quot;</span></span><br><span class="line">$u = $_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$p = $_POST[<span class="string">&#x27;pazzword&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">isset</span>($u) &amp;&amp; <span class="title function_">isset</span>($p))&#123;</span><br><span class="line">    <span class="keyword">if</span>($u===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; $p ===<span class="string">&#x27;a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04&#x27;</span>)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在线解密：</p><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/AES%E8%A7%A3%E5%AF%86%E6%8B%BFpassword.png"></p><h2 id="20-mdb文件脱库"><a href="#20-mdb文件脱库" class="headerlink" title="20 mdb文件脱库"></a>20 mdb文件脱库</h2><p>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。 </p><ul><li>首先判断是否是这个框架 然后找到该框架下 此文件的位置 然后进行下载获取相应的flag</li></ul><p>题目中明确说站点是asp+access 所以直接御剑或者dirsearch进行扫描</p><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/mdb.png"></p><p>可以看到&#x2F;db&#x2F;db.mdb 文件 直接下载打开 就可以查看站点相关的配置</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集，web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_OneToTen</title>
      <link href="/2024/08/12/ctfshow-OneToTen/"/>
      <url>/2024/08/12/ctfshow-OneToTen/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="1-前端的html代码的注释泄露信息"><a href="#1-前端的html代码的注释泄露信息" class="headerlink" title="1 前端的html代码的注释泄露信息"></a>1 前端的html代码的注释泄露信息</h2><p>有的时候，如果程序员没有足够的安全意识，可能部署站点的时候会直接将含有敏感信息的代码部署上去，我们需要去查看相应的代码，发现潜在的敏感信息，这道ctf也是如此，直接右键检查网页，即可获取注释中未删除的flag<br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/ctfshow_one_1.png"></p><h2 id="2-前端拦截不让右键打开检查，ctrl-shift-i-快捷键-浏览器右上角的工具栏"><a href="#2-前端拦截不让右键打开检查，ctrl-shift-i-快捷键-浏览器右上角的工具栏" class="headerlink" title="2 前端拦截不让右键打开检查，ctrl+shift+i 快捷键 &#x2F; 浏览器右上角的工具栏"></a>2 前端拦截不让右键打开检查，ctrl+shift+i 快捷键 &#x2F; 浏览器右上角的工具栏</h2><p>这个题和上一个题类似，也是将flag藏在了注释之中，但是不同的地方是这个前台js设置了不能右键，那么我们选择直接快捷键或者是浏览器右上方的工具栏即可。</p><h2 id="3-抓包-flag藏于数据包中"><a href="#3-抓包-flag藏于数据包中" class="headerlink" title="3 抓包 flag藏于数据包中"></a>3 抓包 flag藏于数据包中</h2><p>数据包也是一个信息比较多的地方，我们需要仔细检查站点的数据包，可能会有意想不到的收获，这个题目也是这样，右键检查，选择网络，刷新界面，打开数据包，可以看到数据包中存在flag字段<br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/ctfshow_three_1.png"></p><h2 id="4-robots-txt-文件"><a href="#4-robots-txt-文件" class="headerlink" title="4 robots.txt 文件"></a>4 robots.txt 文件</h2><ul><li>robots.txt 文件是一个纯文本文件，在这个文件中网站管理者可以声明该网站中不想被robots访问的部分，或者指定搜索引擎只收录指定的内容。robots.txt文件只能放在一个站点的根目录下。</li><li>当一个搜索机器人访问一个站点的时候，首先会检查该站点根目录下是否存在robots.txt文件，如果存在的话，搜索机器人就会按照该文件中的内容来确定访问的范围，如果这个文件不存在，那么搜索机器人就沿着链接抓取。</li></ul><p>下边是一个robots.txt文件的示例:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /flagishere.txt</span><br></pre></td></tr></table></figure><p>对于这个ctf题目:</p><ul><li>扫描目录，发现存在robots.txt文件，查看文件内容，发现目录flagishere.txt</li></ul><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/ctfshow_four_1.png"></p><ul><li>访问&#x2F;flagishere.txt, 获取flag</li></ul><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/ctfshow_four_2.png"></p><h2 id="5-php源码的泄露"><a href="#5-php源码的泄露" class="headerlink" title="5 php源码的泄露"></a>5 php源码的泄露</h2><p>.phps后缀文件: php source 即php的原始文件，使用phps文件可以看到对应php文件的实际源码内容。</p><p>扫描目录，发现存在index.phps文件，直接下载打开发现flag就在其中:<br><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/ctfshow_five_1.png"></p><h2 id="6-网站部署的时候，直接解压源码但是没有删除源码"><a href="#6-网站部署的时候，直接解压源码但是没有删除源码" class="headerlink" title="6 网站部署的时候，直接解压源码但是没有删除源码"></a>6 网站部署的时候，直接解压源码但是没有删除源码</h2><h3 id="扫描目录-发现www-zip"><a href="#扫描目录-发现www-zip" class="headerlink" title="扫描目录 发现www.zip"></a>扫描目录 发现<a href="http://www.zip/">www.zip</a></h3><h3 id="解压直接发现fl000g-txt文件-直接拿到flag"><a href="#解压直接发现fl000g-txt文件-直接拿到flag" class="headerlink" title="解压直接发现fl000g.txt文件 直接拿到flag"></a>解压直接发现fl000g.txt文件 直接拿到flag</h3><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/%E6%BA%90%E7%A0%81%E6%B2%A1%E5%88%A0.png"></p><h2 id="7-版本控制文件-git-残留"><a href="#7-版本控制文件-git-残留" class="headerlink" title="7 版本控制文件.git 残留"></a>7 版本控制文件.git 残留</h2><p>版本控制文件.git文件部署的时候没有删除，可以通过版本控制文件还原站点源码，导致源码泄露。</p><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/ctfshow_seven_1.png"></p><h2 id="8-版本控制文件-svn-残留"><a href="#8-版本控制文件-svn-残留" class="headerlink" title="8 版本控制文件.svn 残留"></a>8 版本控制文件.svn 残留</h2><p>版本控制文件.svn文件部署的时候没有删除，可以通过版本控制文件还原站点源码，导致源码泄露。</p><p><img src="https://iwbtfy-photos.oss-cn-beijing.aliyuncs.com/ctfshow/oneToTen/ctfshow_eight_1.png"></p><h2 id="9-swp文件"><a href="#9-swp文件" class="headerlink" title="9 .swp文件"></a>9 .swp文件</h2><p>vim编辑器使用时会有一个缓存文件，这个缓存文件在保存时进行删除，但是在vim意外退出时这个缓存文件，会以源文件加一个.swp后缀进行保存，我们可以尝试访问这些文件来尝试获取一些文件。</p><h2 id="10-cookie里边也有可能有惊喜哦"><a href="#10-cookie里边也有可能有惊喜哦" class="headerlink" title="10 cookie里边也有可能有惊喜哦"></a>10 cookie里边也有可能有惊喜哦</h2><p>这题就是将flag存放在了cookie里边，所以我们只需要知道cookie的位置即可。</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集，web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析python中的深浅拷贝</title>
      <link href="/2024/07/22/%E6%B5%85%E6%9E%90python%E4%B8%AD%E7%9A%84%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2024/07/22/%E6%B5%85%E6%9E%90python%E4%B8%AD%E7%9A%84%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><h2 id="问题抛出"><a href="#问题抛出" class="headerlink" title="问题抛出"></a>问题抛出</h2><p>对于下边这段代码，使用三种形式创建dict_test的临时变量tmp，并且修改tmp的值，输出原来变量和tmp变量，三种形式有什么不同，分别执行修改后，最后三个print的值是多少。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">dict_test = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;ruby&quot;</span>, <span class="string">&quot;list&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;</span><br><span class="line"></span><br><span class="line">tmp1 = dict_test</span><br><span class="line">tmp2 = dict_test.copy()</span><br><span class="line">tmp3 = deepcopy(dict_test)</span><br><span class="line"></span><br><span class="line">tmp1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;leo&quot;</span></span><br><span class="line">tmp1[<span class="string">&quot;list&quot;</span>][<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">tmp2[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;leo&quot;</span></span><br><span class="line">tmp2[<span class="string">&quot;list&quot;</span>][<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">tmp3[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;leo&quot;</span></span><br><span class="line">tmp3[<span class="string">&quot;list&quot;</span>][<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tmp1, dict_test)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;leo&#x27;, &#x27;list&#x27;: [10, 2]&#125; &#123;&#x27;name&#x27;: &#x27;leo&#x27;, &#x27;list&#x27;: [10, 2]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(tmp2, dict_test)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;leo&#x27;, &#x27;list&#x27;: [10, 2]&#125; &#123;&#x27;name&#x27;: &#x27;ruby&#x27;, &#x27;list&#x27;: [10, 2]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(tmp3, dict_test)  <span class="comment"># &#123;&#x27;name&#x27;: &#x27;leo&#x27;, &#x27;list&#x27;: [10, 2]&#125; &#123;&#x27;name&#x27;: &#x27;ruby&#x27;, &#x27;list&#x27;: [1, 2]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="答案解析"><a href="#答案解析" class="headerlink" title="答案解析"></a>答案解析</h2><hr><p>答案:</p><p>{‘name’: ‘leo’, ‘list’: [10, 2]} {‘name’: ‘leo’, ‘list’: [10, 2]}</p><p>{‘name’: ‘leo’, ‘list’: [10, 2]} {‘name’: ‘ruby’, ‘list’: [10, 2]}</p><p>{‘name’: ‘leo’, ‘list’: [10, 2]} {‘name’: ‘ruby’, ‘list’: [1, 2]}</p><hr><h3 id="1-tmp1-dict-test"><a href="#1-tmp1-dict-test" class="headerlink" title="1. tmp1 &#x3D; dict_test"></a>1. tmp1 &#x3D; dict_test</h3><p>这行代码将 dict_test 赋值给 tmp1。这意味着 tmp1 和 dict_test 是同一个字典对象的两个引用。 而字典对象可变变量，所以修改新的字典对象会直接影响旧的字典对象的所有元素。</p><h3 id="2-tmp2-dict-test-copy"><a href="#2-tmp2-dict-test-copy" class="headerlink" title="2. tmp2 &#x3D; dict_test.copy()"></a>2. tmp2 &#x3D; dict_test.copy()</h3><p>使用copy函数创建原始对象的浅拷贝，并将其赋值给tmp，浅拷贝会创建一个新的对象，并且将原始对象的值赋值给新的对象，但是，只是将引用赋值给了新的对象，所以对于原始字典对象中的不可变数据，比如字符串来说，修改新的对象的值不会影响原始字典对象的值，但是对于可变数据类型列表来说，修改新的字典对象中的列表就会影响到旧的字典对象中的列表。</p><h3 id="3-tmp3-deepcopy-dict-test"><a href="#3-tmp3-deepcopy-dict-test" class="headerlink" title="3. tmp3 &#x3D; deepcopy(dict_test)"></a>3. tmp3 &#x3D; deepcopy(dict_test)</h3><p>使用deepcopy创建了原始字典对象的深拷贝，并且将原始字典的值全部赋值给新的字典对象，新对象和原始对象完全独立，修改新对象的值不会影响原始字典对象的值</p><p>那么对于上边提到的可变数据类型和不可变数据类型有什么区别？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ 不可变类型（如整数、浮点数、字符串、元组）：一旦创建，其内容不能被修改。当你对一个不可变类型的变量进行操作时，实际上是在创建一个新的对象，并将变量指向这个新对象。</span><br><span class="line">+ 可变类型（如列表、字典、集合）：其内容可以被修改。当你对一个可变类型的变量进行操作时，你实际上是在修改原有的对象。</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>使用&#x3D;操作，修改新对象的任意元素，都会修改原对象的相应元素</li><li>使用浅拷贝，修改新对象的不可变数据类型的元素，原对象不会发生改变，但是修改新对象的可变数据类型的元素，原对象也会发生变化</li><li>使用深拷贝可以创建与原对象完全独立的副本，无论修改什么，都不会影响原对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础语法小细节 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析python中的按位与和逻辑与</title>
      <link href="/2024/07/19/%E6%B5%85%E6%9E%90python%E4%B8%AD%E7%9A%84%E6%8C%89%E4%BD%8D%E4%B8%8E%E5%92%8C%E9%80%BB%E8%BE%91%E4%B8%8E/"/>
      <url>/2024/07/19/%E6%B5%85%E6%9E%90python%E4%B8%AD%E7%9A%84%E6%8C%89%E4%BD%8D%E4%B8%8E%E5%92%8C%E9%80%BB%E8%BE%91%E4%B8%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="and与-的区别"><a href="#and与-的区别" class="headerlink" title="and与&amp;的区别"></a>and与&amp;的区别</h1><h2 id="1-问题抛出"><a href="#1-问题抛出" class="headerlink" title="1. 问题抛出"></a>1. 问题抛出</h2><p>首先,给出一个问题,下边这段代码输出的内容是什么:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res1 = <span class="number">2</span> <span class="keyword">and</span> <span class="number">5</span> </span><br><span class="line">res1_contrast_one = <span class="number">5</span> <span class="keyword">and</span> <span class="number">2</span></span><br><span class="line">res1_contrast_two = <span class="number">5</span> &amp; <span class="number">2</span></span><br><span class="line"></span><br><span class="line">res3 = <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> -<span class="number">1</span> &gt;= <span class="number">0</span></span><br><span class="line">res4 = (<span class="number">1</span> &gt;= <span class="number">0</span>) &amp; (-<span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">res5 = <span class="number">1</span> &gt;= <span class="number">0</span> &amp; -<span class="number">1</span> &gt;= <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res1, res1_contrast_one, res1_contrast_two, res3, res4, res5)</span><br></pre></td></tr></table></figure><h2 id="2-答案解析"><a href="#2-答案解析" class="headerlink" title="2. 答案解析"></a>2. 答案解析</h2><hr><p>答案揭晓: 5 2 0 False False True</p><hr><p>解释：</p><ol><li>&amp;和and这两个运算符是两种不一样的运算符，&amp;表示按位与，而and表示逻辑与</li><li>逻辑与: 不为0，’’, none的值都认为是True，都是如果符号两边都是不为0的值，则为True，并且and会返回最后一个值</li><li>按位与: 如果是整数,则直接进行位运算。</li><li>&amp;和and这两个运算符的运算顺序也不一样，在python中，() &gt; &amp; &gt; 比较运算符 &gt; and</li></ol><ul><li>有了以上知识点，就很好理解了，<ul><li>res1 表达式的and两边都是True，返回后边的5</li><li>res1_contrast_one返回后边的2</li><li>5&amp;2 5: 101 2:010 刚好与完归零了</li></ul></li><li>而后边三个，就涉及到运算顺序了:<ul><li>res3: 先比较运算符,左边是True,右边是False,则返回False</li><li>res4: 先算小括号的,左边是True,右边是False,则返回False</li><li>res5: 先算按位与&amp;,0&amp;-1 显然是0, 1&gt;&#x3D;0&gt;&#x3D;0 为True</li></ul></li></ul><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>开发过程中，主要注意两点:</p><ol><li>and和&amp;是不一样的，一个是逻辑与，一个是按位与</li><li>and和&amp;的运算顺序也是不一样的，并且() &gt; &amp; &gt; 比较运算符 &gt; and</li></ol>]]></content>
      
      
      <categories>
          
          <category> python基础语法小细节 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
